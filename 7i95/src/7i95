#!/usr/bin/env python3

import sys, os
from functools import partial

from PyQt5 import uic
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox,
	QDialog)

from lib7i95 import buildcombos
from lib7i95 import buildmenus
from lib7i95 import sscards
from lib7i95 import checkconfig
from lib7i95 import loadini
from lib7i95 import buildini
from lib7i95 import buildhal
from lib7i95 import buildio
from lib7i95 import buildmisc
from lib7i95 import buildss
from lib7i95 import utilities
from lib7i95 import card
from lib7i95 import pcinfo
from lib7i95 import extcmd
from lib7i95.help import Ui_Dialog as helpDialog
from lib7i95 import helptext
from lib7i95.about import Ui_about as aboutDialog

class VersionError(QMainWindow):
	def __init__(self):
		super(VersionError, self).__init__()
		print('wrong python version')
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle('Version Error')
		msgBox.setText(f'Python 3.6 or newer is required.\nYour Python is {sys.version[0:3]}')
		msgBox.setStandardButtons(QMessageBox.Ok)
		msgBox.exec()
		sys.exit()

class MainWindow(QMainWindow):
	def __init__(self):
		super(MainWindow, self).__init__()
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/lib7i95'
			print('Installed')
		if os.path.split(sys.argv[0])[0] == '.':
			self.lib_path = os.path.split(os.path.realpath(sys.argv[0]))[0]
			print('In Development')
		uic.loadUi(os.path.join(self.lib_path, '7i95.ui'), self)
		self.version = '0.1.1'
		self.emcVersion = '1.1'
		self.setWindowTitle(f'7i95 Configuration Tool Version {self.version}')
		self.card = {'type':'7i95', 'joints': 6, 'inputs': 24, 'outputs': 6}
		buildmenus.build(self)
		buildcombos.build(self)
		utilities.checks(self)
		self.extcmd = extcmd.extcmd()
		self.ladderOptionsList = utilities.plcOptions()
		self.axes = 0

		self.setupConnections()
		#self.testing()
		# for testing
		#loadini.openini(self, '/home/john/linuxcnc/configs/7i95/7i95.ini')
		self.show()

	def testing(self):
		self.configName.setText('7i95')
		self.linearUnitsCB.setCurrentIndex(1)
		self.maxLinearVel.setText('5')
		self.ipAddressCB.setCurrentIndex(1)
		self.guiCB.setCurrentIndex(1)
		self.positionOffsetCB.setCurrentIndex(1)
		self.positionFeedbackCB.setCurrentIndex(1)
		self.axisCB_0.setCurrentIndex(1)
		#utilities.pidSetDefault(self)
		self.driveCB_0.setCurrentIndex(3)
		self.scale_0.setText('1000')
		self.minLimit_0.setText('0')
		self.maxLimit_0.setText('25')
		self.maxVelocity_0.setText('5')
		self.maxAccel_0.setText('15')
		#self..setText('')

	def setupConnections(self):
		self.configName.textChanged[str].connect(partial(utilities.configNameChanged, self))
		self.spindleTypeCB.currentIndexChanged.connect(partial(utilities.spindleTypeChanged, self))
		self.ssCardCB.currentIndexChanged.connect(partial(sscards.build, self))
		self.actionNew.triggered.connect(partial(utilities.fileNew, self))
		self.actionOpen.triggered.connect(partial(loadini.openini, self))
		self.actionSavePins.triggered.connect(partial(card.savePins, self))
		self.actionSaveSignals.triggered.connect(partial(card.saveSignals, self))
		self.actionSaveParameters.triggered.connect(partial(card.saveParameters, self))
		self.actionSave.triggered.connect(self.buildfiles)
		self.actionSaveAs.triggered.connect(partial(utilities.fileSaveAs, self))
		self.actionCheck.triggered.connect(partial(checkconfig.checkit, self))
		self.actionBuild.triggered.connect(self.buildfiles)
		for i in range(self.card['joints']):
			getattr(self, f'axisCB_{i}').currentIndexChanged.connect(partial(utilities.axisChanged, self))
		for i in range(self.card['joints']):
			getattr(self, f'scale_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
		for i in range(self.card['joints']):
			getattr(self, f'maxVelocity_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
		for i in range(self.card['joints']):
			getattr(self, f'maxAccel_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
		for i in range(self.card['joints']):
			getattr(self, f'pidDefault_{i}').clicked.connect(partial(utilities.pidSetDefault, self))
		self.pidDefault_s.clicked.connect(partial(utilities.pidSetDefault, self))
		for i in range(self.card['joints']):
			getattr(self, 'driveCB_' + str(i)).currentIndexChanged.connect(partial(utilities.driveChanged, self))
		self.actionTabHelp.triggered.connect(partial(self.help, 0))
		self.actionBuildHelp.triggered.connect(partial(self.help, 20))
		self.actionPCHelp.triggered.connect(partial(self.help, 30))

		self.cpuPB.clicked.connect(partial(pcinfo.cpuInfo, self))
		self.nicPB.clicked.connect(partial(pcinfo.nicInfo, self))
		self.calcNicPB.clicked.connect(partial(pcinfo.nicCalc, self))
		self.readTmaxPB.clicked.connect(partial(pcinfo.readTmax, self))
		self.readPB.clicked.connect(partial(card.readCard, self, '7i95'))
		self.flashPB.clicked.connect(partial(card.flashCard, self, '7i95'))
		self.reloadPB.clicked.connect(partial(card.reloadCard, self, '7i95'))
		self.pinsPB.clicked.connect(partial(card.getPins, self))


	def buildfiles(self):
		if not checkconfig.checkit(self):
			self.outputPTE.appendPlainText('Build Failed')
			return
		buildini.build(self)
		buildhal.build(self)
		buildio.build(self)
		buildmisc.build(self)
		if self.ssCardCB.currentData():
			buildss.build(self)

	def fileNew(self):
		buildcombos.build(self)
		buildmenus.build(self)

	def errorMsg(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def help(self, tab):
		if tab == 0:
			tab = self.tabWidget.currentIndex()
		dialog = QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.label.setText(helptext.descriptions(tab))
		dialog.exec_()

def main():
	app = QApplication(sys.argv)
	if float(sys.version[0:3]) < 3.6:
		ex = VersionError()
	else:
		ex = MainWindow()
	sys.exit(app.exec_())

if __name__ == "__main__":
	main()
